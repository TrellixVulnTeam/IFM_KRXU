"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpExceptionFilter = void 0;
const common_1 = require("@nestjs/common");
const exception_type_1 = require("../const/exception.type");
const i18n_enum_1 = require("../const/i18n.enum");
const generate_exception_logobject_1 = require("../func/generate.exception.logobject");
const kafkaService_1 = require("../queueService/kafkaService");
const post_kafka_1 = require("../queueService/post-kafka");
let HttpExceptionFilter = class HttpExceptionFilter {
    constructor(i18n, kafkaConfig, exceptionTopic) {
        this.i18n = i18n;
        this.logger = new common_1.Logger('HTTP');
        this.postKafka = new post_kafka_1.PostKafka(new kafkaService_1.KafkaService(kafkaConfig));
        this.exceptionTopic = exceptionTopic;
    }
    async catch(exception, host) {
        const ctx = host.switchToHttp();
        const response = ctx.getResponse();
        const request = ctx.getRequest();
        const status = exception instanceof common_1.HttpException
            ? exception.getStatus()
            : common_1.HttpStatus.INTERNAL_SERVER_ERROR;
        const reqResObject = (0, generate_exception_logobject_1.createExceptionReqResLogObj)(request, exception, exception_type_1.ExceptionType.HTTP_EXCEPTÄ°ON);
        console.log('exception is ' + exception);
        console.log('exception.getStatus  is ' + exception.getStatus());
        console.log('exception.getResponse  is ' + exception.getResponse());
        switch (exception.getStatus()) {
            case 400:
                console.log(400);
                try {
                    const result = exception.getResponse();
                    let message = '';
                    if (result === null || result === void 0 ? void 0 : result.key) {
                        message = await this.i18n.translate(result.key, {
                            lang: ctx.getRequest().i18nLang,
                            args: result.args,
                        });
                    }
                    console.log('message is ' + message + 'result is ' + result);
                    const finalExcep = {
                        reqResObject,
                        clientResponse: exception.getResponse(),
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    this.logger.warn(`${JSON.stringify(finalExcep)}   `);
                    response.status(status).json(exception.getResponse());
                }
                catch (error) {
                    console.log(`${this.exceptionTopic} topic cannot connected due to` + error);
                }
                break;
            case 401:
                console.log(401);
                try {
                    const message = await getI18nNotAuthorizedMessage(this.i18n, request);
                    const clientResponse = { status, message };
                    const finalExcep = {
                        reqResObject,
                        clientResponse,
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    console.log(`${this.exceptionTopic} sending to topic from code 401`);
                    this.logger.warn(`${JSON.stringify(finalExcep)}   `);
                    response.status(status).json(clientResponse);
                }
                catch (error) {
                    console.log(`${this.exceptionTopic} topic cannot connected due to ` + error);
                }
                break;
            case 403:
                console.log(403);
                try {
                    const message = await getI18nNotAuthorizedMessage(this.i18n, request);
                    const clientResponse = { status, message };
                    const finalExcep = {
                        reqResObject,
                        clientResponse,
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    this.logger.warn(`${JSON.stringify(finalExcep)}   `);
                    response.status(status).json(clientResponse);
                }
                catch (error) {
                    console.log('FACILITY_EXCEPTION topic cannot connected due to ' + error);
                }
                break;
            case 404:
                console.log(404);
                const result = exception.getResponse();
                try {
                    let message = '';
                    if (result === null || result === void 0 ? void 0 : result.key) {
                        message = await this.i18n.translate(result.key, {
                            lang: ctx.getRequest().i18nLang,
                            args: result.args,
                        });
                    }
                    const clientResponse = { status, message };
                    const finalExcep = {
                        reqResObject,
                        clientResponse,
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    this.logger.warn(`${JSON.stringify(finalExcep)}   `);
                    response.status(status).json(clientResponse);
                }
                catch (error) {
                    this.logger.error(`${JSON.stringify(error)}   `);
                }
                break;
            case 500:
                console.log(500);
                try {
                    const result = exception.getResponse();
                    console.log('result is ' + result);
                    let message = 'something goes wrong';
                    if (result === null || result === void 0 ? void 0 : result.key) {
                        message = await this.i18n.translate(result.key, {
                            lang: ctx.getRequest().i18nLang,
                            args: result.args,
                        });
                    }
                    const clientResponse = { status, message };
                    const finalExcep = {
                        reqResObject,
                        clientResponse,
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    this.logger.error(`${JSON.stringify(exception.message)}   `);
                    response.status(status).json({ message: exception.message });
                    break;
                }
                catch (error) {
                    const clientResponse = { status, error };
                    const finalExcep = {
                        reqResObject,
                        clientResponse,
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    this.logger.error(`${JSON.stringify(exception.message)}   `);
                    response.status(status).json(exception.message);
                    break;
                }
            default:
                console.log('other');
                try {
                    let message = 'something goes wrong';
                    if (result === null || result === void 0 ? void 0 : result.key) {
                        message = await this.i18n.translate(result.key, {
                            lang: ctx.getRequest().i18nLang,
                            args: result.args,
                        });
                    }
                    const clientResponse = { status, message };
                    const finalExcep = {
                        reqResObject,
                        clientResponse,
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    this.logger.error(`${JSON.stringify(exception.message)}   `);
                    response.status(status).json(exception.message);
                    break;
                }
                catch (error) {
                    const clientResponse = { status, error };
                    const finalExcep = {
                        reqResObject,
                        clientResponse,
                    };
                    await this.postKafka.producerSendMessage(this.exceptionTopic, JSON.stringify(finalExcep));
                    this.logger.error(`${JSON.stringify(exception.message)}   `);
                    response.status(status).json(exception.message);
                    break;
                }
        }
    }
};
HttpExceptionFilter = __decorate([
    (0, common_1.Catch)(common_1.HttpException),
    __metadata("design:paramtypes", [Object, Object, Object])
], HttpExceptionFilter);
exports.HttpExceptionFilter = HttpExceptionFilter;
async function getI18nNotAuthorizedMessage(i18n, request) {
    var _a;
    const username = ((_a = request.user) === null || _a === void 0 ? void 0 : _a.name) || 'Guest';
    return await i18n.translate(i18n_enum_1.I18NEnums.USER_NOT_HAVE_PERMISSION, {
        lang: request.i18nLang,
        args: { username },
    });
}
//# sourceMappingURL=exception.filter.js.map