"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpCacheInterceptor = exports.NoCache = void 0;
const common_1 = require("@nestjs/common");
const common_2 = require("@nestjs/common");
const NoCache = () => (0, common_2.SetMetadata)('ignoreCaching', true);
exports.NoCache = NoCache;
let HttpCacheInterceptor = class HttpCacheInterceptor extends common_1.CacheInterceptor {
    constructor() {
        super(...arguments);
        this.cachedRoutes = new Map();
    }
    trackBy(context) {
        const request = context.switchToHttp().getRequest();
        if (!request) {
            return undefined;
        }
        const { httpAdapter } = this.httpAdapterHost;
        const isHttpApp = httpAdapter && !!httpAdapter.getRequestMethod;
        const cacheMetadata = this.reflector.get(common_1.CACHE_KEY_METADATA, context.getHandler());
        if (!isHttpApp || cacheMetadata) {
            return cacheMetadata;
        }
        const ignoreCaching = this.reflector.get('ignoreCaching', context.getHandler());
        if (ignoreCaching) {
            return undefined;
        }
        const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';
        if (!isGetRequest) {
            setTimeout(async () => {
                for (const values of this.cachedRoutes.values()) {
                    for (const value of values) {
                        await this.cacheManager.del(value);
                    }
                }
            }, 0);
            return undefined;
        }
        const key = httpAdapter.getRequestUrl(request).split('?')[0];
        if (this.cachedRoutes.has(key) &&
            !this.cachedRoutes.get(key).includes(httpAdapter.getRequestUrl(request))) {
            this.cachedRoutes.set(key, [
                ...this.cachedRoutes.get(key),
                httpAdapter.getRequestUrl(request),
            ]);
            return httpAdapter.getRequestUrl(request);
        }
        this.cachedRoutes.set(key, [httpAdapter.getRequestUrl(request)]);
        return httpAdapter.getRequestUrl(request);
    }
};
HttpCacheInterceptor = __decorate([
    (0, common_1.Injectable)()
], HttpCacheInterceptor);
exports.HttpCacheInterceptor = HttpCacheInterceptor;
//# sourceMappingURL=http.cache.interceptor.js.map